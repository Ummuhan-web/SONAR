AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with Public, Private, and Database subnets across 3 AZs

Parameters:
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for Public Subnet 1
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for Public Subnet 2
  PublicSubnet3CIDR:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for Public Subnet 3
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for Private Subnet 1
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.5.0/24
    Description: CIDR block for Private Subnet 2
  PrivateSubnet3CIDR:
    Type: String
    Default: 10.0.6.0/24
    Description: CIDR block for Private Subnet 3
  DBSubnet1CIDR:
    Type: String
    Default: 10.0.7.0/24
    Description: CIDR block for Database Subnet 1
  DBSubnet2CIDR:
    Type: String
    Default: 10.0.8.0/24
    Description: CIDR block for Database Subnet 2
  DBSubnet3CIDR:
    Type: String
    Default: 10.0.9.0/24
    Description: CIDR block for Database Subnet 3
  AMIId:
    Type: String
    Description: AMI ID for the EC2 instances
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  KeyPairName:
    Type: String
    Description: Key pair name for the EC2 instances
  MasterUsername:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /myapp/db/master-username
    Description: SSM parameter for the Aurora master username
  MasterUserPassword:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /myapp/db/master-password
    Description: SSM parameter for the Aurora master password

Resources:
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Internet Gateway for Public Subnets
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-InternetGateway

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets (in 3 AZs)
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet3CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet3

  # Private Subnets (in 3 AZs)
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  # Database Subnets (in 3 AZs)
  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: DBSubnet1
  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: DBSubnet2
  DBSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref DBSubnet3CIDR
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: DBSubnet3

  # NAT Gateways and Elastic IPs
  NatGatewayEIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGatewayEIP2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGatewayEIP3:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  NatGateway3:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP3.AllocationId
      SubnetId: !Ref PublicSubnet3

  # Route Tables
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC    

  DBRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DBRouteTable

  # Routes for the Public Subnet
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Routes for the Private Subnets (through NAT Gateways)
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  # Subnet Associations with Route Tables
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  DBSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBSubnet1
      RouteTableId: !Ref DBRouteTable

  DBSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBSubnet2
      RouteTableId: !Ref DBRouteTable

  DBSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DBSubnet3
      RouteTableId: !Ref DBRouteTable

  # Aurora Cluster
  AuroraCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora-mysql
      EngineVersion: '8.0.mysql_aurora.3.05.2'
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds: [ !Ref DBClusterSecurityGroup ]
      BackupRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: MyAuroraCluster

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora cluster
      SubnetIds: 
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !Ref DBSubnet3

  DBClusterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for Aurora cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  # Application Load Balancer (ALB)
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups: [ !Ref ALBSecurityGroup ]
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: MyALB

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Target Group
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /health

  # Listener
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '200'
            ContentType: text/plain
            MessageBody: 'Hello World'
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # Auto Scaling Group and Launch Configuration
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref AMIId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups: [ !Ref WebServerSecurityGroup ]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<html><h1>Hello World</h1></html>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: WebServer
          PropagateAtLaunch: true

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for web servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

Outputs:
  VPCID:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: VPCID

  PublicSubnet1ID:
    Description: The ID of Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1ID

  PublicSubnet2ID:
    Description: The ID of Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2ID

  PublicSubnet3ID:
    Description: The ID of Public Subnet 3
    Value: !Ref PublicSubnet3
    Export:
      Name: PublicSubnet3ID

  PrivateSubnet1ID:
    Description: The ID of Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1ID

  PrivateSubnet2ID:
    Description: The ID of Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2ID

  PrivateSubnet3ID:
    Description: The ID of Private Subnet 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: PrivateSubnet3ID

  DBSubnet1ID:
    Description: The ID of DB Subnet 1
    Value: !Ref DBSubnet1
    Export:
      Name: DBSubnet1ID

  DBSubnet2ID:
    Description: The ID of DB Subnet 2
    Value: !Ref DBSubnet2
    Export:
      Name: DBSubnet2ID

  DBSubnet3ID:
    Description: The ID of DB Subnet 3
    Value: !Ref DBSubnet3
    Export:
      Name: DBSubnet3ID

  ALBArn:
    Description: The ARN of the ALB
    Value: !Ref ALB
    Export:
      Name: ALBArn

  AuroraClusterEndpoint:
    Description: The endpoint of the Aurora DB cluster
    Value: !GetAtt AuroraCluster.Endpoint.Address
    Export:
      Name: AuroraClusterEndpoint