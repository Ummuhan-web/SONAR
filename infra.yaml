AWSTemplateFormatVersion: '2010-09-09'
Description: Infrastructure Template with ALB, Auto Scaling, Aurora, and NAT Gateway per AZ using existing VPC and Subnets

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Resources:
  # Import VPC and Subnets
  VPC:
    Type: 'AWS::EC2::VPC'
    Description: Import the existing VPC
    Value: !ImportValue VPCID

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 1
    Value: !ImportValue PublicSubnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 2
    Value: !ImportValue PublicSubnet2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 3
    Value: !ImportValue PublicSubnet3

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 1
    Value: !ImportValue PrivateSubnet1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 2
    Value: !ImportValue PrivateSubnet2

  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 3
    Value: !ImportValue PrivateSubnet3

  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 1
    Value: !ImportValue DBSubnet1

  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 2
    Value: !ImportValue DBSubnet2

  DBSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 3
    Value: !ImportValue DBSubnet3

  # NAT Gateways and EIPs for Each AZ
  EIP1:
    Type: 'AWS::EC2::EIP'

  NATGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1

  EIP2:
    Type: 'AWS::EC2::EIP'

  NATGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2

  EIP3:
    Type: 'AWS::EC2::EIP'

  NATGateway3:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref PublicSubnet3

  # Private Subnet Route Tables to NAT Gateways
  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateRouteTable3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PrivateRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  # Application Load Balancer (ALB)
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: ALBTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  # Security Group for ALB
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Auto Scaling Group for EC2 instances
  AutoScalingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AutoScalingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAutoScaling
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforLaunchWizard
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  AutoScalingInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref AutoScalingRole

  AutoScalingLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref AutoScalingInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<html><h1>Hello World</h1></html>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchConfigurationName: !Ref AutoScalingLaunchConfig
      MinSize: 3
      MaxSize: 3
      DesiredCapacity: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  # Security Group for EC2 instances
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Amazon Aurora DB Cluster
  AuroraDBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora
      EngineMode: provisioned
      MasterUsername: !Sub '{{resolve:ssm-secure:/myapp/db/masteruser:1}}'
      MasterUserPassword: !Sub '{{resolve:ssm-secure:/myapp/db/masterpassword:1}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7

  # Aurora DB Subnet Group
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Aurora DB Subnet Group
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !Ref DBSubnet3

  # Security Group for Aurora DB
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Aurora DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: VPCID

  PublicSubnet1ID:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1ID

  PublicSubnet2ID:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2ID

  PublicSubnet3ID:
    Description: Public Subnet 3 ID
    Value: !Ref PublicSubnet3
    Export:
      Name: PublicSubnet3ID

  PrivateSubnet1ID:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1ID

  PrivateSubnet2ID:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2ID

  PrivateSubnet3ID:
    Description: Private Subnet 3 ID
    Value: !Ref PrivateSubnet3
    Export:
      Name: PrivateSubnet3ID

  NATGateway1ID:
    Description: NAT Gateway 1 ID
    Value: !Ref NATGateway1

  NATGateway2ID:
    Description: NAT Gateway 2 ID
    Value: !Ref NATGateway2

  NATGateway3ID:
    Description: NAT Gateway 3 ID
    Value: !Ref NATGateway3

  ALBDNS:
    Description: DNS name of the ALB
    Value: !GetAtt ALB.DNSName

  EC2AutoScalingGroupName:
    Description: Auto Scaling Group Name for EC2 instances
    Value: !Ref AutoScalingGroup

  AuroraDBClusterEndpoint:
    Description: Endpoint for the Aurora DB Cluster
    Value: !GetAtt AuroraDBCluster.Endpoint.Address

  AuroraDBClusterReadEndpoint:
    Description: Read-only Endpoint for the Aurora DB Cluster
    Value: !GetAtt AuroraDBCluster.ReadEndpoint.Address
