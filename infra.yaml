AWSTemplateFormatVersion: '2010-09-09'
Description: Infrastructure Template with ALB, EC2 Auto Scaling, and Amazon Aurora using existing VPC and Subnets

Parameters:
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Resources:
  # Import VPC and Subnets
  VPC:
    Type: 'AWS::EC2::VPC'
    Description: Import the existing VPC
    Value: !ImportValue VPCID

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 1
    Value: !ImportValue PublicSubnet1

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 2
    Value: !ImportValue PublicSubnet2

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import Public Subnet 3
    Value: !ImportValue PublicSubnet3

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 1
    Value: !ImportValue PrivateSubnet1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 2
    Value: !ImportValue PrivateSubnet2

  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import Private Subnet 3
    Value: !ImportValue PrivateSubnet3

  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 1
    Value: !ImportValue DBSubnet1

  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 2
    Value: !ImportValue DBSubnet2

  DBSubnet3:
    Type: 'AWS::EC2::Subnet'
    Description: Import DB Subnet 3
    Value: !ImportValue DBSubnet3

  # Application Load Balancer (ALB)
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: MyALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: ALBTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  # Security Group for ALB
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Auto Scaling Group for EC2 instances
  AutoScalingLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl enable httpd
          systemctl start httpd
          echo "<html><h1>Hello World</h1></html>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchConfigurationName: !Ref AutoScalingLaunchConfig
      MinSize: 3
      MaxSize: 3
      DesiredCapacity: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  # Security Group for EC2 instances
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # Amazon Aurora DB Cluster
  AuroraDBCluster:
    Type: 'AWS::RDS::DBCluster'
    Properties:
      Engine: aurora
      EngineMode: provisioned
      MasterUsername: masteruser
      MasterUserPassword: masterpassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      BackupRetentionPeriod: 7

  # DB Subnet Group
  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora DB
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !Ref DBSubnet3

  # Security Group for Aurora DB
  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Aurora DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  ALBEndpoint:
    Description: The DNS name of the ALB
    Value: !GetAtt ALB.DNSName

  AutoScalingGroupID:
    Description: The Auto Scaling Group ID
    Value: !Ref AutoScalingGroup

  AuroraDBClusterID:
    Description: The Aurora DB Cluster ID
    Value: !Ref AuroraDBCluster
